apiVersion: argoproj.io/v1alpha1
kind: Workflow                  
metadata:
  generateName: build-ai-code-editor- 
spec:
  entrypoint: main
  tolerations:
    - key: "versionlens.com/build-only"
      operator: "Exists"
      effect: "NoSchedule"
  volumes:
  - name: ai-code-editor-deploy-key
    secret:
      secretName: ai-code-editor-deploy-key
      defaultMode: 0400
  - name: versionlens-regcred
    secret:
      secretName: versionlens-regcred
      items:
        - key: .dockerconfigjson
          path: config.json
  volumeClaimTemplates:
  - metadata:
      name: workspace
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
  templates:
    - name: main
      steps:
        - - name: check-image-exists
            templateRef:
              clusterScope: true
              name: "docker"
              template: "check-image-exists"
            continueOn:
              failed: true
            arguments:
              parameters:
                - name: image
                  value: "{{=jsonpath(workflow.parameters.image_params, '$.ai_code_editor.registry')}}/{{=jsonpath(workflow.parameters.image_params, '$.ai_code_editor.image')}}:{{=jsonpath(workflow.parameters.repo_dependencies, '$.ai_code_editor.commit')}}"
                - name: regcred
                  value: versionlens-regcred
        - - name: clone-repository
            when: "{{steps.check-image-exists.exitCode}} != 0"
            templateRef:
              clusterScope: true
              name: "git-clone"
              template: "clone-version-repository"
            arguments:
              parameters:
                - name: repo
                  value: "{{=jsonpath(workflow.parameters.repo_dependencies, '$.ai_code_editor.url')}}"
                - name: commit
                  value: "{{=jsonpath(workflow.parameters.repo_dependencies, '$.ai_code_editor.commit')}}"
                - name: workspace_dir
                  value: "ai-code-editor"
                - name: deploy_key_secret
                  value: "ai-code-editor-deploy-key"
        - - name: build-push-docker
            when: "{{steps.check-image-exists.exitCode}} != 0"
            template: "build-push-docker"
            arguments:
              parameters:
                - name: workspace_dir
                  value: "ai-code-editor"
                - name: dockerfile
                  value: "{{=jsonpath(workflow.parameters.image_params, '$.ai_code_editor.dockerfile_path')}}"
                - name: destination
                  value: "{{=jsonpath(workflow.parameters.image_params, '$.ai_code_editor.registry')}}/{{=jsonpath(workflow.parameters.image_params, '$.ai_code_editor.image')}}:{{=jsonpath(workflow.parameters.repo_dependencies, '$.ai_code_editor.commit')}}"
                - name: relative_context
                  value: "{{=jsonpath(workflow.parameters.image_params, '$.ai_code_editor.docker_build_context')}}"
                - name: image_name
                  value: "{{=jsonpath(workflow.parameters.image_params, '$.ai_code_editor.registry')}}/{{=jsonpath(workflow.parameters.image_params, '$.ai_code_editor.image')}}"
                - name: regcred
                  value: "versionlens-regcred"
    
    - name: build-push-docker
      inputs:
        parameters:
          - name: workspace_dir
          - name: dockerfile
          - name: destination
          - name: relative_context
          - name: image_name
          - name: regcred
      container:
        image: gcr.io/kaniko-project/executor:latest
        command: [/kaniko/executor]
        resources:
          requests:
            memory: "16384Mi"
            cpu: "1"
          limits:
            memory: "32768Mi"
            cpu: "1"
        args:
          [
            "--dockerfile={{inputs.parameters.dockerfile}}",
            "--destination={{inputs.parameters.destination}}",
            "--context=dir:///workspace/{{inputs.parameters.workspace_dir}}/{{inputs.parameters.relative_context}}",
            "--cache=true",
            "--cache-repo={{inputs.parameters.image_name}}-cache"
          ]
        workingDir: /workspace/{{inputs.parameters.workspace_dir}}
        volumeMounts:
          - name: workspace
            mountPath: /workspace
          - name: "{{inputs.parameters.regcred}}"
            mountPath: /kaniko/.docker/